#BlueJ class context
comment0.target=EfficiencyTest
comment0.text=\r\n\ EfficiencyTest\:\ program\ to\ benchmark\ the\ efficiency\ of\ the\ Map\ index\ used\r\n\ in\ the\ Search\ engine\ of\ this\ application.\ As\ aforementioned,\ the\ Map\ is\r\n\ implemented\ with\ a\ Linked\ Hash\ Table\ with\ a\ default\ load\ factor\ of\ 0.75\r\n\ (LF_STANDARD\ \=\ 0.75).\ The\ factors\ that\ determine\ the\ Map's\ efficiency\ are\r\n\ the\ ones\ that\ guarantee\ that\ the\ Table's\ real\ load\ factor,\ or\ the\ average\r\n\ size\ of\ its\ buckets,\ is\ lower\ than\ 0.75.\ These\ factors\ are\:\r\n\ (a)\ The\ hashCode()\ method\ implemented\ in\ the\ Term\ class,\r\n\ \ \ \ \ which\ acts\ as\ the\ Key\ of\ Map\ index\:\ the\ better\ it\ is,\ the\ fewer\r\n\ \ \ \ \ the\ number\ of\ collisions\ produced\ will\ be.\r\n\ (b)\ The\ estimation\ of\ the\ maximum\ size\ of\ Map\ index,\ or,\ equivalently,\r\n\ \ \ \ \ the\ estimation\ of\ capacity\ of\ the\ Linked\ Hash\ Table\ that\ implements\r\n\ \ \ \ \ it\ (theArray.length),\ and\ thus\ the\ load\ factor\ is\ size\ /\ theArray.length\r\n\r\n\ To\ that\ end,\ indicating\ in\ the\ first\ argument\ of\ the\ main\ method\ the\ base\r\n\ of\ the\ polynomial\ dispersion\ function\ that\ implements\ the\ hashCode()\ method\r\n\ of\ the\ Term\ class\ ("31",\ "1"\ and\ "4")\ and,\ in\ the\ second\ argument,\ whether\r\n\ the\ HashTable\ implements\ a\ Rehashing\ function\ ("YES"\ or\ "NO"),\ you\ can\r\n\ obtain\ as\ a\ result\ the\ real\ load\ factors,\ standard\ deviations,\ average\ cost\r\n\ of\ a\ key's\ lookup\ and\ the\ occupation\ histograms\ of\ 3\ Linked\ Hash\ Tables\r\n\ with\ maximum\ estimated\ sizes\:\r\n\ (1)\ 22310,\ the\ exact\ number\ of\ Terms\ contained\ in\ the\ books\ of\ lista10.txt\r\n\ (2)\ 11155,\ half\ the\ previous\ size\r\n\ (3)\ \ \ 112,\ a\ hundredth\ (approx.)\ of\ the\ previous\ size\r\n\r\n\ Analyzing\ said\ results,\ the\ most\ efficient\ parameters\ for\r\n\ the\ Linked\ Hash\ Table\ implementation\ for\ Map\ index\ of\ lista10.txt\r\n\ can\ be\ determined,\ i.e.,\ which\ is\ the\ "best"\ hashCode()\ method\r\n\ to\ be\ implemented\ in\ Term\ and\ which\ is\ the\ "best"\ size\ estimation\r\n\ that\ it\ could\ have\ (as\ a\ maximum).\r\n\ \r\n\ @author\ (EDA-QA)\ \r\n\ @version\ (Curso\ 2020-2021)\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment2.params=maxTerms\ hcBase
comment2.target=libraries.dataStructures.scattered.HashTable\ createTable(int,\ int)
comment3.params=bookName\ t\ hcBase
comment3.target=boolean\ extractKeysFrom(java.lang.String,\ libraries.dataStructures.scattered.HashTable,\ int)
numComments=4
